package thess.tourism.creative.creativetourismthessapp.DbFiles;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import thess.tourism.creative.creativetourismthessapp.DbFiles.Creator;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CREATOR.
*/
public class CreatorDao extends AbstractDao<Creator, Long> {

    public static final String TABLENAME = "CREATOR";

    /**
     * Properties of entity Creator.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NameEn = new Property(1, String.class, "NameEn", false, "NAME_EN");
        public final static Property NameEl = new Property(2, String.class, "NameEl", false, "NAME_EL");
        public final static Property Organization = new Property(3, String.class, "Organization", false, "ORGANIZATION");
        public final static Property JobEn = new Property(4, String.class, "JobEn", false, "JOB_EN");
        public final static Property JobEl = new Property(5, String.class, "JobEl", false, "JOB_EL");
        public final static Property AddressEn = new Property(6, String.class, "AddressEn", false, "ADDRESS_EN");
        public final static Property AddressEl = new Property(7, String.class, "AddressEl", false, "ADDRESS_EL");
        public final static Property WebsiteAddress = new Property(8, String.class, "websiteAddress", false, "WEBSITE_ADDRESS");
        public final static Property Lat = new Property(9, Double.class, "lat", false, "LAT");
        public final static Property Longitude = new Property(10, Double.class, "longitude", false, "LONGITUDE");
        public final static Property CategoryId = new Property(11, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property StartingPointId = new Property(12, Long.class, "startingPointId", false, "STARTING_POINT_ID");
        public final static Property Map_image = new Property(13, String.class, "map_image", false, "MAP_IMAGE");
        public final static Property Details_image = new Property(14, String.class, "details_image", false, "DETAILS_IMAGE");
    };


    public CreatorDao(DaoConfig config) {
        super(config);
    }
    
    public CreatorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CREATOR' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME_EN' TEXT," + // 1: NameEn
                "'NAME_EL' TEXT," + // 2: NameEl
                "'ORGANIZATION' TEXT," + // 3: Organization
                "'JOB_EN' TEXT," + // 4: JobEn
                "'JOB_EL' TEXT," + // 5: JobEl
                "'ADDRESS_EN' TEXT," + // 6: AddressEn
                "'ADDRESS_EL' TEXT," + // 7: AddressEl
                "'WEBSITE_ADDRESS' TEXT," + // 8: websiteAddress
                "'LAT' REAL," + // 9: lat
                "'LONGITUDE' REAL," + // 10: longitude
                "'CATEGORY_ID' INTEGER," + // 11: categoryId
                "'STARTING_POINT_ID' INTEGER," + // 12: startingPointId
                "'MAP_IMAGE' TEXT," + // 13: map_image
                "'DETAILS_IMAGE' TEXT);"); // 14: details_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CREATOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Creator entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NameEn = entity.getNameEn();
        if (NameEn != null) {
            stmt.bindString(2, NameEn);
        }
 
        String NameEl = entity.getNameEl();
        if (NameEl != null) {
            stmt.bindString(3, NameEl);
        }
 
        String Organization = entity.getOrganization();
        if (Organization != null) {
            stmt.bindString(4, Organization);
        }
 
        String JobEn = entity.getJobEn();
        if (JobEn != null) {
            stmt.bindString(5, JobEn);
        }
 
        String JobEl = entity.getJobEl();
        if (JobEl != null) {
            stmt.bindString(6, JobEl);
        }
 
        String AddressEn = entity.getAddressEn();
        if (AddressEn != null) {
            stmt.bindString(7, AddressEn);
        }
 
        String AddressEl = entity.getAddressEl();
        if (AddressEl != null) {
            stmt.bindString(8, AddressEl);
        }
 
        String websiteAddress = entity.getWebsiteAddress();
        if (websiteAddress != null) {
            stmt.bindString(9, websiteAddress);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(10, lat);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(11, longitude);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(12, categoryId);
        }
 
        Long startingPointId = entity.getStartingPointId();
        if (startingPointId != null) {
            stmt.bindLong(13, startingPointId);
        }
 
        String map_image = entity.getMap_image();
        if (map_image != null) {
            stmt.bindString(14, map_image);
        }
 
        String details_image = entity.getDetails_image();
        if (details_image != null) {
            stmt.bindString(15, details_image);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Creator readEntity(Cursor cursor, int offset) {
        Creator entity = new Creator( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NameEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NameEl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Organization
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // JobEn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // JobEl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AddressEn
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AddressEl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // websiteAddress
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // lat
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // longitude
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // categoryId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // startingPointId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // map_image
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // details_image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Creator entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNameEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameEl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrganization(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJobEn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJobEl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddressEn(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddressEl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWebsiteAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLat(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setLongitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setCategoryId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setStartingPointId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setMap_image(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDetails_image(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Creator entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Creator entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
